name: Train Cat-Dog Classifier

on:
  push:
    # 只有這些分支推送時會觸發
    branches:
      - claude-resnet50-pre
      - claude-resnet50-no-pre-test
      - claude-resnet101-pre2
      - claude-resnet101-no-pre-test
      
  workflow_dispatch: {}   # 手動觸發
  schedule:
    - cron: '0 */6 * * *' # 每 6 小時（UTC）跑一次；會在預設分支觸發，但我們用 matrix 跑多分支

jobs:
  train:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # 在這裡列出要自動跑的分支清單（排程 & 手動觸發時會全部跑一輪）
        branch:
        - claude-resnet50-pre
        - claude-resnet50-no-pre-test
        - claude-resnet101-pre2
        - claude-resnet101-no-pre-test

    steps:
    - name: Checkout target branch
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.branch }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install kaggle gdown

    # 產生乾淨的 artifact 名稱（把分支名中的奇怪字元轉成底線）
    - name: Normalize branch name for artifact names
      id: names
      run: |
        SAFE="$(echo '${{ matrix.branch }}' | sed -e 's/[^A-Za-z0-9._-]/_/g')"
        echo "safe=$SAFE" >> $GITHUB_OUTPUT
        echo "CKPT_NAME=ckpt_${SAFE}" >> $GITHUB_ENV

    # 從先前 run 把相同分支的 checkpoint 抓回來（若沒有就忽略）
    - name: Download last checkpoint (if any)
      uses: dawidd6/action-download-artifact@v6
      with:
        name: ${{ env.CKPT_NAME }}
        path: ckpt_in
        search_artifacts: true
        if_no_artifact_found: ignore
        workflow_conclusion: completed

    - name: Build RESUME_ARG
      id: resume
      run: |
        if [ -f ckpt_in/checkpoint_latest.pth ]; then
          echo "resume=--resume ckpt_in/checkpoint_latest.pth" >> $GITHUB_OUTPUT
          echo "Found checkpoint_latest.pth, will resume."
        else
          echo "resume=" >> $GITHUB_OUTPUT
          echo "No checkpoint found, start fresh."
        fi

    # 從分支名自動決定要跑哪個 ResNet 架構
    - name: Extract architecture from branch name
      id: extract_arch
      run: |
        BR="${{ matrix.branch }}"
        if [[ "$BR" == *"resnet18"* ]]; then
          ARCH="resnet18"
        elif [[ "$BR" == *"resnet34"* ]]; then
          ARCH="resnet34"
        elif [[ "$BR" == *"resnet50"* ]]; then
          ARCH="resnet50"
        elif [[ "$BR" == *"resnet101"* ]]; then
          ARCH="resnet101"
        else
          ARCH="resnet18"  # fallback
        fi
        echo "arch=$ARCH" >> $GITHUB_OUTPUT
        echo "Detected architecture: $ARCH"

    # 下載資料集（你原本的 GDrive 版本）
    - name: Download dataset (GDrive)
      run: |
        echo "從 Google Drive 下載數據集..."
        gdown https://drive.google.com/uc?id=19QvyV00Zq6dwRY3hA8z_PyHB-naUUMB7 -O dataset.zip
        unzip -q dataset.zip -d file/
        echo "✅ 解壓完成，資料放在 file/ 資料夾內"

    - name: Verify dataset structure
      run: |
        echo "檢查數據集結構..."
        ls -la file/kaggle_cats_vs_dogs_f/ || true
        ls -la file/kaggle_cats_vs_dogs_f/train/ || true
        ls -la file/kaggle_cats_vs_dogs_f/val/ || true
    
    - name: Train model (auto-stop before 6h)
      run: |
        echo "開始訓練模型（SVHN）..."
        python train_model.py \
          --data-dir file/kaggle_cats_vs_dogs_f \
          --dataset svhn \
          --architecture ${{ steps.extract_arch.outputs.arch }} \
          --max-epochs 500 \
          --save-every 5 \
          --max-wall-min 330 \
          ${{ steps.resume.outputs.resume }}


    - name: Upload checkpoint for next run
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.CKPT_NAME }}    # 每個分支都有獨立的 artifact 名稱
        path: |
          checkpoint_latest.pth
          checkpoint_epoch*.pth
          checkpoint_best.pth
          TRAINING_COMPLETE.txt
          NEED_MORE.txt
        retention-days: 14

    # 僅在最終模型存在時才做測試與上傳
    - name: Test model predictions (val)
      if: ${{ hashFiles('best_cat_dog_model.pth') != '' }}
      run: |
        echo "測試模型預測（val）..."
        mkdir -p test_images
        cp file/kaggle_cats_vs_dogs_f/val/cat/*.jpg test_images/ 2>/dev/null || true
        cp file/kaggle_cats_vs_dogs_f/val/dog/*.jpg test_images/ 2>/dev/null || true
        python predict.py --model best_cat_dog_model.pth --folder test_images/

    - name: Test model's train predictions
      if: ${{ hashFiles('best_cat_dog_model.pth') != '' }}
      run: |
        echo "測試模型預測（train）..."
        mkdir -p test_images
        cp file/kaggle_cats_vs_dogs_f/train/cat/*.jpg test_images/ 2>/dev/null || true
        cp file/kaggle_cats_vs_dogs_f/train/dog/*.jpg test_images/ 2>/dev/null || true
        python predict_train.py --model best_cat_dog_model.pth --folder test_images/

    - name: Upload trained model
      if: ${{ hashFiles('best_cat_dog_model.pth') != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: trained-cat-dog-model-${{ steps.names.outputs.safe }}
        path: |
          best_cat_dog_model.pth
          overfit_training_curves.png
        retention-days: 30
